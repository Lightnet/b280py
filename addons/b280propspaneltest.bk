# ===============================================
# 
# Information:
# Simple format for blender plugin add on.
# Status: Finish
# 
# ===============================================
# 
# https://blenderartists.org/t/blender-2-8-panel-location/1142035
# https://blender.stackexchange.com/questions/130671/creating-new-tabs-in-properties-panel
#
# https://docs.blender.org/api/blender2.8/bpy.types.SpaceProperties.html?highlight=spaceproperties#bpy.types.SpaceProperties
# 2.80\scripts\startup\bl_ui\space_properties.py
# https://blender.stackexchange.com/questions/134625/2-8-how-to-add-a-button-to-the-toolbar


bl_info = {
    "name": "Custom Props Tool Panel test",
    "author":"none",
    "version":(0,0,1),
    "blender": (2,80,0),
    "location": "none",
    "category": "none",
    "warning": "",
    "wiki_url": "",
}

import bpy
from bpy.types import Header, Panel, UIList

from rna_prop_ui import PropertyPanel

class PROPERTIES_HT_Custom(Header):
    bl_space_type = 'PROPERTIES'

    def draw(self, _context):
        layout = self.layout
        layout.operator("object.navbartest_operator")
        #layout.template_header()

class NavTestOperator(bpy.types.Operator):
    bl_idname = "object.navbartest_operator"
    bl_label = "Hello"

    def execute(self, context):
        print("hello viewport")
        return {'FINISHED'}

class CustomButtonsPanel:
    bl_space_type = 'PROPERTIES'
    bl_region_type = 'WINDOW'
    bl_context = "custom"


# [PROPERTIES] display navbar in all section in sub PROPERTIES
class CustomTooltest_Panel(bpy.types.Panel):
    """Creates a Panel in the Object properties window"""
    bl_label = "Custom"
    bl_idname = "OBJECT_PT_CustomNav"

    #bl_space_type = 'PROPERTIES'
    #bl_region_type = 'WINDOW'

    bl_space_type = 'PROPERTIES'
    bl_region_type = 'NAVIGATION_BAR'

    #bl_context = "object"
    #bl_options = {'DEFAULT_CLOSED'}
    bl_options = {'HIDE_HEADER'}

    #@classmethod
    #def poll(cls, context):
        #return (context.object is not None)
    #def draw_header(self, context):
        #layout = self.layout
        #layout.operator("object.navbartest_operator")
        #layout.label(text="Custom Tool All.", icon='WORLD_DATA')
        #obj = context.object
        #row = layout.row()
        #row.operator("object.select_random")
        #layout.prop(obj, "select", text="")

    def draw(self, context):
        #layout = self.layout        
        #self.layout.operator('object.property_example')
        #row = layout.row()
        #row.label(text="Custom Tool All.", icon='WORLD_DATA')

        layout = self.layout

        view = context.space_data

        layout.scale_x = 1.4
        layout.scale_y = 1.4
        layout.operator('object.navbartest_operator',icon='WORLD_DATA')
        #layout.prop_tabs_enum(view, "context", icon_only=True)

#array
classes = [
    PROPERTIES_HT_Custom,
    CustomTooltest_Panel,
    NavTestOperator
]
"""
classes = (
    MyAddonPreferences,
    MyPropertyGroup,
    ADDON_OT_some_operator,
    ADDON_OT_some_other_operator,
    ADDON_PT_some_panel
)
register, unregister = bpy.utils.register_classes_factory(classes)
"""

def register():
    #print("Hello World")

    for cls in classes:
        bpy.utils.register_class(cls)

def unregister():
    #print("Goodbye World")
    for cls in classes:
        bpy.utils.unregister_class(cls)

# This allows you to run the script directly from Blender's Text editor
# to test the add-on without having to install it.
if __name__ == "__main__":
    register()